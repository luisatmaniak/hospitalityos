const path = require('path')
const EventEmitter = require('events')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('./webpack.client')
const serverConfig = require('./webpack.server')

const setupDevServer = expressApp => {
  const compilationEmitter = new EventEmitter()

  // modify client config to work with hot middleware
  clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry]
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
  )

  // dev middleware
  process.env.VUE_ENV = 'client'
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    stats: {
      colors: true,
      chunks: false,
    },
  })

  expressApp.use(devMiddleware)

  clientCompiler.plugin('done', stats => {
    const fs = devMiddleware.fileSystem
    const manifestPath = path.join(clientConfig.output.path, 'vue-ssr-client-manifest.json')

    stats = stats.toJson()
    if (stats.errors.length) return

    const clientManifest = JSON.parse(fs.readFileSync(manifestPath, 'utf-8'))
    compilationEmitter.emit('singleUpdate', { clientManifest })
  })

  // hot middleware
  expressApp.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  process.env.VUE_ENV = 'server'
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs

  serverCompiler.watch({}, (err, stats) => {
    if (err) {
      compilationEmitter.emit('error')
      return
    }

    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))

    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-server-bundle.json')
    const serverBundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
    compilationEmitter.emit('singleUpdate', { serverBundle })
  })

  let currentServerBundle, currentClientManifest
  compilationEmitter.on('singleUpdate', ({ serverBundle, clientManifest }) => {
    if (serverBundle) currentServerBundle = serverBundle
    if (clientManifest) currentClientManifest = clientManifest

    if (currentServerBundle && currentClientManifest) {
      compilationEmitter.emit('update', {
        serverBundle: currentServerBundle,
        clientManifest: currentClientManifest,
      })
    }
  })

  return compilationEmitter
}

module.exports = setupDevServer
